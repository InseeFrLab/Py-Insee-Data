---
title: "Employment by sector and departement"
format:
  html:
    code-fold: true
    self-contained: true
  ipynb: default
jupyter: python3
execute:
  eval: false
---

# Employment by sector and departement

## Dependencies

```{python}
from shapely import wkt

import pandas as pd
from pandas.api.types import CategoricalDtype
import geopandas as gpd
import seaborn as sns
import math

from matplotlib.pyplot import pie
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

import pynsee.metadata as pm
import pynsee.geodata as pg
import pynsee.localdata as pl
```


## Retrieving datasets

```{python}
# get a list all data available : datasets and variables
metadata = pl.get_local_metadata()

# geographic metadata
nivgeo = pl.get_nivgeo_list()
```

We would like to retrieve administrative border and make some pre-defined
processing to ease mapping later

```{python}
# get departement map
dep = pg.get_geodata('ADMINEXPRESS-COG-CARTO.LATEST:departement')
dep = dep.translate(departement=['971', '972', '974', '973', '976'],
                   factor=[1.5, 1.5, 1.5, 0.3, 1.5])

dep = dep.zoom(factor = 3.5 , angle = math.pi * (1 - 3 * 1/9))

dep = dep.loc[:, ["insee_dep", "geometry"]]
dep = dep.rename(columns={'insee_dep': 'CODEGEO'})
```

We end up with the following shapefile:

```{python}
gpd.GeoDataFrame(dep).plot()
```

## Retrieving "departement" data from INSEE's API

We first get local data from INSEE API:

```{python}
data = pl.get_local_data(dataset_version = 'GEO2020FLORES2017',
                     variables =  'NA17',
                     nivgeo = 'DEP')
data = data.rename(columns={'NA17': 'A17'})
```

Let's only keep 
headcounts and remove the total from the data:

```{python}
df = data[data["UNIT"] == "NBSALET"].reset_index(drop=True)
df = df[~df["A17"].isin(["ENS"])]
```

```{python}
#| echo: false
df.head(2).to_html()
```

Let's compute the
share of activity in total employment by department


```{python}
df['employment_share'] = 100 * df["OBS_VALUE"] / df['OBS_VALUE'].groupby(df['CODEGEO']).transform('sum')
```

## Combining datasets

Let's merge values and geographic 
borders:

```{python}
datamap = gpd.GeoDataFrame(dep).merge(
  df, how = 'right', on = 'CODEGEO')
```

We are going to 
add english activity labels at A17 level
thanks to the `pynsee.metadata.get_activity_list`
function:

```{python}
activity = pm.get_activity_list("A17")
activity["TITLE_A17_EN"] = activity["A17"] + " - " + activity["TITLE_A17_EN"]
datamap = datamap.merge(activity, how='left', on='A17')
```

```{python}
datamap["center"] = datamap['geometry'].centroid
datamap["lon"] = datamap["center"].x
datamap["lat"] = datamap["center"].y

# list of departements
list_dep = datamap["CODEGEO"].unique() 
```

## Preparing our map


```{python}
# make color palette
colors = sns.color_palette("Set1") + sns.color_palette("Set2")

# order activity sectors according to average share
emplTot = datamap[["employment_share", "TITLE_A17_EN"]].groupby(datamap['TITLE_A17_EN']).mean()
emplTot = emplTot.sort_values(by=["employment_share"],  ascending=False)

datamap["TITLE_A17_EN"] = datamap["TITLE_A17_EN"].astype(CategoricalDtype(categories=emplTot.index, ordered=True))
datamap = datamap.sort_values(["TITLE_A17_EN"]).reset_index(drop=True)
datamap
```

```{python}
list_sectors = list(datamap['A17'].unique())
ax = datamap.plot(zorder=1, color='white', edgecolor='black')
```

## Map

```{python}
import numpy as np
datamap_points = datamap.copy()
datamap_points['geometry'] = datamap["center"]

#fig, ax = plt.subplots(figsize=(16,16))
#datamap.plot(ax=ax, color="lightgray", edgecolor="grey")
datamap_points['ms'] = np.sqrt(datamap_points['OBS_VALUE'])/5

ax = datamap.plot(zorder=1, color='white', edgecolor='black')
datamap_points.loc[
  datamap_points['A17'] == "OZ"
  ].plot(
    markersize='ms', column = 'OBS_VALUE', cmap = "magma", zorder = 2, ax = ax)
```

```{python}
#| eval : false
#| echo: false

def extract_lon(x):    
    return wkt.loads(x).xy[0][0]
def extract_lat(x):    
    return wkt.loads(x).xy[1][0]

ax = datamap.plot(color='white', edgecolor='black', figsize = (15,15))

for idep in list_dep:
    df = datamap[datamap["CODEGEO"] == idep].reset_index(drop=True)   
    df["lon"] = df["center"].apply(lambda x: extract_lon(x))
    df["lat"] = df["center"].apply(lambda x: extract_lat(x))
    
    df = df[df["lon"] == min(df["lon"])].reset_index(drop=True)
    center = df.loc[0,"lon"], df.loc[0,"lat"]
    
    ratios = df["employment_share"]
    
    ax_sub = inset_axes(ax, width=0.4, height=0.4, loc=10, bbox_to_anchor=center, bbox_transform=ax.transData)
    ax_sub.pie(ratios, wedgeprops={'edgecolor': 'gray','linewidth': 0.25}, colors = colors)
    
plt.suptitle('Employment by sector and departement', x = 0.4, y = 0.85,
            horizontalalignment= 'left',
            fontsize = 12, fontweight='bold')
plt.legend(emplTot.index, loc="lower left", bbox_to_anchor=(-27, -9), ncol=2)

plt.show()
```

